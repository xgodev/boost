// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/cloudevents/sdk-go/v2/event"
	mock "github.com/stretchr/testify/mock"

	publisher "github.com/xgodev/boost/wrapper/publisher"
)

// Driver is an autogenerated mock type for the Driver type
type Driver struct {
	mock.Mock
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *Driver) Publish(_a0 context.Context, _a1 []*event.Event) ([]publisher.PublishOutput, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 []publisher.PublishOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*event.Event) ([]publisher.PublishOutput, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*event.Event) []publisher.PublishOutput); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]publisher.PublishOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*event.Event) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDriver creates a new instance of Driver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDriver(t interface {
	mock.TestingT
	Cleanup(func())
}) *Driver {
	mock := &Driver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
