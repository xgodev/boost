package inject

import (
	"fmt"
	"github.com/xgodev/boost/annotation"
	"text/template"
)

//go:embed
const moduleTemplate = `// Code generated by inject; DO NOT EDIT.

package {{.PackageName}}

import (
	{{.Alias}} "{{.ImportPath}}"
{{- range .Imports}}
	{{.Alias}} "{{.Path}}"
{{- end}}
	"sync"
	"go.uber.org/fx"
)

var {{.FunctionName}}Once sync.Once

func {{.FunctionName}}Module() fx.Option {
	options := fx.Options()

	{{.FunctionName}}Once.Do(func() {
{{if eq .Type "PROVIDE"}}
	options = fx.Module("{{.FunctionName}}",
{{else}}
	options = fx.Options(
{{end}}
{{- range .Modules}}
		{{if .Alias}}{{.Alias}}.{{end}}{{.Entry.Func.Name}}Module(),
{{- end}}
{{if eq .Type "PROVIDE"}}
		fx.Provide(
			{{.Alias}}.{{.FunctionName}},
{{else}}
		fx.Invoke(
			{{.Alias}}.{{.FunctionName}},
{{end}}
		),
	)
	})
	return options
}
`

type ModuleData struct {
	PackageName  string
	FunctionName string
	ImportPath   string
	Modules      []ImportData
	Imports      []ImportData
	Alias        string
	Entry        annotation.Entry
	Type         string
}

type ImportData struct {
	Alias string
	Path  string
	Entry annotation.Entry
}

func NewTemplate() (*template.Template, error) {
	tmpl, err := template.New("module").Parse(moduleTemplate)
	if err != nil {
		return nil, fmt.Errorf("error parsing template: %v", err)
	}
	return tmpl, nil
}
